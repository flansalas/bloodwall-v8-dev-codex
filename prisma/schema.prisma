generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  OWNER
  ADMIN
  COLLAB
}

enum UDEStatus {
  DEFINED
  ACTIVE
  VERIFIED
  CLOSED
}

enum ActionStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

model Company {
  id                   Int          @id @default(autoincrement())
  name                 String
  logoUrl              String?
  industry             String?
  loopStatement        String?
  rhythmCadence        String?
  rhythmDay            String?
  rhythmTime           String?
  currency             String?      @default("USD")
  reviewWindow         String?
  addOnAiCoach         Boolean      @default(false)
  lastSetupCompletedAt DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  categories           Category[]
  teamMembers          TeamMember[]
  udes                 UDE[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  udes      UDE[]

  @@unique([companyId, name])
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  role      Role     @default(COLLAB)
  avatarUrl String?
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ownedUDEs UDE[]    @relation("UDEOwner")
  actions   Action[]

  @@unique([companyId, name])
}

model UDE {
  id          Int           @id @default(autoincrement())
  title       String
  status      UDEStatus     @default(DEFINED)
  costImpact  Int
  dueDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyId   Int
  ownerId     Int?
  categoryId  Int?
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner       TeamMember?   @relation("UDEOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  metrics     Metric[]
  actions     Action[]
  activityLog ActivityLog[]
}

model Metric {
  id        Int      @id @default(autoincrement())
  name      String
  baseline  Float
  goal      Float
  current   Float
  lastWeek  Float
  udeId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ude       UDE      @relation(fields: [udeId], references: [id], onDelete: Cascade)
}

model Action {
  id        Int          @id @default(autoincrement())
  text      String
  status    ActionStatus @default(NOT_STARTED)
  dueDate   DateTime?
  udeId     Int
  ownerId   Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  ude       UDE          @relation(fields: [udeId], references: [id], onDelete: Cascade)
  owner     TeamMember   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime @default(now())
  udeId     Int
  ude       UDE      @relation(fields: [udeId], references: [id], onDelete: Cascade)
}

model CronMailSend {
  id        String   @id @default(cuid())
  job       String   // 'nightly-reminders' | 'mam-reminder'
  recipient String   // normalized lower-case email
  dayKey    String   // UTC YYYY-MM-DD
  createdAt DateTime @default(now())

  @@unique([job, recipient, dayKey])
  @@index([dayKey])
}
